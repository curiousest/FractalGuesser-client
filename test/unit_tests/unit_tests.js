// Generated by CoffeeScript 1.8.0
(function() {
  var active_fractal, target_fractal;

  target_fractal = new window.TargetFractal();

  active_fractal = new window.ActiveFractal();

  describe('TargetFractal', function() {
    return describe('zoomIn(zoom_multiplier: int)', function() {
      return it('should zoom in to current zoom * zoom multiplier', function() {
        target_fractal.zoomIn(2);
        target_fractal.get('zoom').should.be.exactly(2);
        target_fractal.zoomIn(4);
        return target_fractal.get('zoom').should.be.exactly(8);
      });
    });
  });

  describe('ActiveFractal', function() {
    describe('startLevel(level: int)', function() {
      it('should set the current zoom level to 1', function() {
        active_fractal.startLevel(1);
        return active_fractal.get('zoom').should.be.exactly(1);
      });
      it('should set the current game`s level', function() {
        active_fractal.startLevel(2);
        return active_fractal.get('level').should.be.exactly(2);
      });
      return it('should set the maximum zoom for this game`s level', function() {
        active_fractal.startLevel(1);
        return active_fractal.get('max_zoom').should.be.exactly(4);
      });
    });
    return describe('startGame()', function() {
      it('should set the game`s level to 1', function() {
        active_fractal.startGame();
        return active_fractal.get('level').should.be.exactly(1);
      });
      return it('should start at level 1', function() {
        active_fractal.startGame();
        active_fractal.get('zoom').should.be.exactly(1);
        return active_fractal.get('max_zoom').should.be.exactly(4);
      });
    });
  });

  describe('FractalManager', function() {
    var fractal_manager;
    fractal_manager = new window.FractalManager({
      x: -2,
      y: 1
    }, {
      x: 1.5,
      y: -1.5
    });
    describe('FractalManager(top_left_default: {x: int, y: int}, bottom_right_default: {x: int, y: int})', function() {
      it('should set the initial top left and bottom right values', function() {
        fractal_manager.get('top_left').should.eql({
          x: -2,
          y: 1
        });
        return fractal_manager.get('bottom_right').should.eql({
          x: 1.5,
          y: -1.5
        });
      });
      return it('should calculate the width and height of the entire canvas', function() {
        fractal_manager.get('entire_width').should.eql(3.5);
        return fractal_manager.get('entire_height').should.eql(2.5);
      });
    });
    describe('setCanvas(top_left: {x: int, y: int}, zoom: int)', function() {
      it('should update the fractal`s top_left coordinate', function() {
        fractal_manager.setCanvas({
          x: 0.5,
          y: 0.5
        }, 4);
        return fractal_manager.get('top_left').should.eql({
          x: 0.5,
          y: 0.5
        });
      });
      return it('should calculate and update the fractal`s bottom_right coordinate', function() {
        fractal_manager.setCanvas({
          x: 0.5,
          y: 0.5
        }, 4);
        fractal_manager.get('bottom_right').should.eql({
          x: 1.375,
          y: -0.125
        });
        fractal_manager.setCanvas({
          x: 0.6,
          y: 0.5
        }, 8);
        return fractal_manager.get('bottom_right').should.eql({
          x: 1.0375,
          y: 0.1875
        });
      });
    });
    describe('resetCanvas()', function() {
      return it('should set the top left and bottom right coordinates back to their default values', function() {
        fractal_manager.setCanvas({
          x: 0.5,
          y: 0.5
        }, 4);
        fractal_manager.resetCanvas();
        fractal_manager.get('bottom_right').should.eql(fractal_manager.get('default_bottom_right'));
        return fractal_manager.get('top_left').should.eql(fractal_manager.get('default_top_left'));
      });
    });
    return describe('renderCanvas()', function() {});
  });

}).call(this);
