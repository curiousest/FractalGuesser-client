// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.FractalGame = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.SECTION_ROW_COUNT = 4;

    _Class.prototype.SECTION_COLUMN_COUNT = 4;

    _Class.prototype.API_CANVAS_SIZE = {
      width: 400,
      height: 285
    };

    _Class.prototype.zoom_multiplier = 4;

    _Class.prototype.target_order = [];

    _Class.prototype.on_correct_route = true;

    _Class.prototype.clicks_remaining = 1;

    _Class.prototype.defaults = {
      zoom: 1,
      level: 1,
      max_zoom: 4,
      fractal_game_message: "Click to zoom in. Try to zoom in to the exact location of the fractal on the left."
    };

    function _Class(pixel_canvas_size, cartesian_canvas_size) {
      this.newRandomTargetCanvas = __bind(this.newRandomTargetCanvas, this);
      this.generateRoute = __bind(this.generateRoute, this);
      this.nextLevelButtonPressed = __bind(this.nextLevelButtonPressed, this);
      this.zoomIn = __bind(this.zoomIn, this);
      this.startGame = __bind(this.startGame, this);
      this.startLevel = __bind(this.startLevel, this);
      var target_fractal_manager;
      Backbone.Model.apply(this);
      if (pixel_canvas_size.width / pixel_canvas_size.height > this.API_CANVAS_SIZE.width / this.API_CANVAS_SIZE.height) {
        this.active_canvas_pixel_height = pixel_canvas_size.height;
        this.active_canvas_pixel_width = Math.floor(pixel_canvas_size.height * (this.API_CANVAS_SIZE.width / this.API_CANVAS_SIZE.height));
      } else {
        this.active_canvas_pixel_width = pixel_canvas_size.width;
        this.active_canvas_pixel_height = Math.floor(pixel_canvas_size.width * (this.API_CANVAS_SIZE.height / this.API_CANVAS_SIZE.width));
      }
      this.target_canvas_pixel_width = this.active_canvas_pixel_width;
      this.target_canvas_pixel_height = this.active_canvas_pixel_height;
      this.active_fractal_manager = new window.FractalManager(cartesian_canvas_size, this.active_canvas_pixel_width, this.active_canvas_pixel_height);
      target_fractal_manager = new window.FractalManager(cartesian_canvas_size, this.target_canvas_pixel_width, this.target_canvas_pixel_height);
      this.target_fractal = new window.TargetFractal(target_fractal_manager);
    }

    _Class.prototype.startLevel = function(this_level) {
      this.may_play_next_level = false;
      this.clicks_remaining = this_level;
      this.set('level', this_level);
      this.set('zoom', 1);
      this.set('max_zoom', Math.pow(this.zoom_multiplier, this_level));
      this.active_fractal_manager.resetCanvas();
      this.set('fractal_game_message', "Level " + this.get('level') + " in progress...");
      $('#target-canvas').css('visibility', 'visible');
      $('#active-canvas').css('visibility', 'hidden');
      $('#next-level-button').css('visibility', 'hidden');
      return this.newRandomTargetCanvas(this_level);
    };

    _Class.prototype.startGame = function() {
      return this.startLevel(1);
    };

    _Class.prototype.zoomIn = function(picked_section) {
      var correct_section, new_zoom;
      new_zoom = this.get('zoom') * this.zoom_multiplier;
      this.active_fractal_manager.setCanvas(picked_section, new_zoom);
      this.set('zoom', new_zoom);
      if (this.may_play_next_level || this.game_over) {
        return;
      }
      this.clicks_remaining -= 1;
      correct_section = this.target_order.shift();
      if (!(correct_section.x === picked_section.x && correct_section.y === picked_section.y)) {
        this.on_correct_route = false;
      }
      if (new_zoom === this.get('max_zoom')) {
        if (this.on_correct_route) {
          this.set('fractal_game_message', "Correct! Level " + this.get('level') + " completed...");
          $('#next-level-button').css('visibility', 'visible');
          return this.may_play_next_level = true;
        } else {
          this.set('fractal_game_message', "Incorrect choice. Sorry, you picked the wrong route. Refresh to play again.");
          this.may_play_next_level = false;
          return this.game_over = true;
        }
      }
    };

    _Class.prototype.nextLevelButtonPressed = function() {
      if (this.may_play_next_level) {
        this.startLevel(this.get('level') + 1);
        return $('#next-level-button').css('visibility', 'hidden');
      }
    };

    _Class.prototype.generateRoute = function(next_level, success_function, error_function) {
      var next_section;
      if (next_level < 0 || next_level > 20) {
        throw new error("Tried to generate route with invalid level.");
      }
      next_section = 0;
      return $.ajax({
        url: window.fractal_api_url + "generate/mandelbrot/" + next_level,
        type: "GET",
        success: function(data) {
          return success_function(JSON.parse(data));
        },
        failure: error_function
      });
    };

    _Class.prototype.newRandomTargetCanvas = function(next_level) {
      this.target_fractal.target_fractal_manager.resetCanvas();
      return this.generateRoute(next_level, (function(_this) {
        return function(generated_route) {
          var level, section, _i, _len;
          _this.target_order = generated_route;
          level = 0;
          for (_i = 0, _len = generated_route.length; _i < _len; _i++) {
            section = generated_route[_i];
            level++;
            _this.target_fractal.target_fractal_manager.setCanvas(section, Math.pow(_this.zoom_multiplier, level));
          }
          _this.target_fractal.zoom = Math.pow(_this.zoom_multiplier, level);
          _this.target_fractal.trigger('change');
          return $('#target-fractal').css('visibility', 'visible');
        };
      })(this), function(failure_message) {
        return alert("Failed to reach fractal-generating server with error: " + failure_message);
      });
    };

    return _Class;

  })(Backbone.Model);

  window.FractalGameView = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.$canvas_el = 0;

    _Class.prototype.current_section = {
      x: 0,
      y: 0
    };

    _Class.prototype.template = _.template("<div class='fractal-header'> <button id='toggle-target-fractal'>Show/Hide Target</button> <button id='next-level-button'>Play Next Level</button> <span class='fractal-game-text' id='fractal-game-message'> <%= fractal_game_message %> </span> </div> <div id='active-canvas' style='position:relative;'> <div class='active-mandelbrot' /> <div class='fractal-sections' /> <span id='active-zoom' class='zoom fractal-game-text'>x<%= zoom %></span> <span id='clicks-remaining' class='fractal-game-text'>Clicks: <%= clicks_remaining %></span> </div>");

    function _Class(options) {
      if (options == null) {
        options = {};
      }
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      this.model = options.model, this.classname = options.classname;
      this.fractal_sections = new window.FractalSections({
        width: this.model.active_canvas_pixel_width,
        height: this.model.active_canvas_pixel_height,
        on_click_function: this.model.zoomIn
      });
      this.fractal_sections_view = new window.FractalSectionsView(this.fractal_sections);
      this.active_fractal_manager_view = new window.FractalManagerView(this.model.active_fractal_manager);
      this.target_fractal_view = new window.TargetFractalView({
        model: this.model.target_fractal
      });
      Backbone.View.apply(this);
    }

    _Class.prototype.initialize = function() {
      this.$el = $('#active-fractal');
      this.model.on('change', this.render, this);
      this.render();
      this.fractal_sections_view.initialize();
      this.active_fractal_manager_view.initialize();
      return this.model.startGame();
    };

    _Class.prototype.assign = function(view, selector) {
      view.setElement($(selector));
      return view.render();
    };

    _Class.prototype.toggleVisibleFractal = function() {
      var active_fractal, target_fractal;
      target_fractal = $('#target-canvas');
      active_fractal = $('#active-canvas');
      if (target_fractal.css('visibility') === 'hidden') {
        target_fractal.css('visibility', 'visible');
        return active_fractal.css('visibility', 'hidden');
      } else {
        target_fractal.css('visibility', 'hidden');
        return active_fractal.css('visibility', 'visible');
      }
    };

    _Class.prototype.render = function() {
      this.$el.html(this.template({
        'zoom': this.model.get('zoom'),
        'max_zoom': this.model.get('max_zoom'),
        'clicks_remaining': this.model.clicks_remaining,
        'active_canvas_pixel_width': this.model.active_canvas_pixel_width,
        'active_canvas_pixel_height': this.model.active_canvas_pixel_height,
        'fractal_game_message': this.model.get('fractal_game_message')
      }));
      $('#toggle-target-fractal').on('click', this.toggleVisibleFractal);
      $('#next-level-button').on('click', this.model.nextLevelButtonPressed);
      this.assign(this.active_fractal_manager_view, '.active-mandelbrot');
      return this.assign(this.fractal_sections_view, '.fractal-sections');
    };

    return _Class;

  })(Backbone.View);

}).call(this);
