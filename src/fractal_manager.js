// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.FractalManager = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype["default"] = {
      top_left: {
        x: 0,
        y: 0
      },
      bottom_right: {
        x: 0,
        y: 0
      },
      default_top_left: {
        x: 0,
        y: 0
      },
      default_bottom_right: {
        x: 0,
        y: 0
      },
      entire_width: 0,
      entire_height: 0,
      pixel_width: 0,
      pixel_height: 0
    };

    _Class.prototype.canvas = 0;

    _Class.prototype.color_picker = pickColorHSV1;

    _Class.prototype.fractal_algorithm = mandelbrotAlgorithm;

    _Class.prototype.fractal_range = 0;

    function _Class(canvas_size, pixel_width, pixel_height) {
      Backbone.Model.apply(this);
      this.set('default_top_left', canvas_size.top_left);
      this.set('default_bottom_right', canvas_size.bottom_right);
      this.set('top_left', canvas_size.top_left);
      this.set('bottom_right', canvas_size.bottom_right);
      this.set('entire_width', canvas_size.bottom_right.x - canvas_size.top_left.x);
      this.set('entire_height', canvas_size.top_left.y - canvas_size.bottom_right.y);
      this.set('pixel_width', pixel_width);
      this.set('pixel_height', pixel_height);
    }

    _Class.prototype.setCanvas = function(target_section, new_zoom) {
      var offset_from_old_top_left, old_top_left;
      offset_from_old_top_left = {
        x: target_section.x * this.get('entire_width') / new_zoom,
        y: target_section.y * this.get('entire_height') / new_zoom
      };
      old_top_left = this.get('top_left');
      this.set('top_left', {
        x: old_top_left.x + offset_from_old_top_left.x,
        y: old_top_left.y - offset_from_old_top_left.y
      });
      return this.set('bottom_right', {
        x: old_top_left.x + offset_from_old_top_left.x + this.get('entire_width') / new_zoom,
        y: old_top_left.y - offset_from_old_top_left.y - this.get('entire_height') / new_zoom
      });
    };

    _Class.prototype.sameSection = function(other_fractal_manager) {
      var other_bottom_right, other_top_left, this_bottom_right, this_top_left;
      this_top_left = this.get('top_left');
      this_bottom_right = this.get('bottom_right');
      other_top_left = other_fractal_manager.get('top_left');
      other_bottom_right = other_fractal_manager.get('bottom_right');
      return this_top_left.x === other_top_left.x && this_top_left.y === other_top_left.y && this_bottom_right.x === other_bottom_right.x && this_bottom_right.y === other_bottom_right.y;
    };

    _Class.prototype.resetCanvas = function() {
      this.set('top_left', this.get('default_top_left'));
      return this.set('bottom_right', this.get('default_bottom_right'));
    };

    return _Class;

  })(Backbone.Model);

  window.FractalManagerView = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.template = _.template("<canvas style='position:absolute;' width='<%= pixel_width %>' height='<%= pixel_height %>'> </canvas>");

    function _Class(model) {
      this.model = model;
      this.render = __bind(this.render, this);
      Backbone.View.apply(this);
    }

    _Class.prototype.render = function() {
      this.$el.html(this.template({
        'pixel_width': this.model.get('pixel_width'),
        'pixel_height': this.model.get('pixel_height')
      }));
      draw(this.$el.find('canvas')[0], {
        x: this.model.get('top_left').x,
        y: this.model.get('bottom_right').x
      }, {
        x: this.model.get('top_left').y,
        y: this.model.get('bottom_right').y
      }, this.model.color_picker, this.model.fractal_algorithm);
      return this.$el;
    };

    return _Class;

  })(Backbone.View);

}).call(this);
