// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.FractalSection = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.top_left = {
      x: 0,
      y: 0
    };

    _Class.prototype.width = 0;

    _Class.prototype.height = 0;

    _Class.prototype.on_click_function = 0;

    function _Class(options) {
      if (options == null) {
        options = {};
      }
      Backbone.Model.apply(this);
      this.top_left = options.top_left, this.width = options.width, this.height = options.height, this.on_click_function = options.on_click_function;
    }

    return _Class;

  })(Backbone.Model);

  window.FractalSectionView = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.initialize = function() {
      this.el.classList.add('fractal-section');
      this.el.setAttribute('style', 'top: ' + this.model.top_left.y + 'px; ' + 'left: ' + this.model.top_left.x + 'px; ' + 'border: 1px; ' + 'border-style: solid;' + 'min-width: ' + this.model.width + 'px; ' + 'min-height: ' + this.model.height + 'px; ' + 'position: absolute;');
      this.$el.html('&nbsp');
      return this.$el.on('click', (function(_this) {
        return function() {
          return _this.model.on_click_function(_this.model.top_left);
        };
      })(this));
    };

    _Class.prototype.render = function() {
      return this.$el;
    };

    return _Class;

  })(Backbone.View);

  window.FractalSections = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.model = window.FractalSection;

    _Class.prototype.sections = 4;

    _Class.prototype.width = 0;

    _Class.prototype.height = 0;

    function _Class(options) {
      var fractalSection, section_height, section_width, top_left, x_offset, y_offset, _i, _j, _ref, _ref1;
      _Class.__super__.constructor.apply(this, arguments);
      this.pop();
      this.width = options.width, this.height = options.height;
      for (x_offset = _i = 0, _ref = this.sections - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x_offset = 0 <= _ref ? ++_i : --_i) {
        section_width = this.width / this.sections;
        for (y_offset = _j = 0, _ref1 = this.sections - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y_offset = 0 <= _ref1 ? ++_j : --_j) {
          section_height = this.height / this.sections;
          top_left = {
            x: Math.floor(x_offset * section_width),
            y: Math.floor(y_offset * section_height)
          };
          fractalSection = new window.FractalSection({
            top_left: top_left,
            width: Math.floor(section_width) - 1,
            height: Math.floor(section_height) - 1,
            on_click_function: options.on_click_function
          });
          this.add(fractalSection);
        }
      }
    }

    return _Class;

  })(Backbone.Collection);

  window.FractalSectionsView = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.sectionList = [];

    function _Class(collection) {
      this.collection = collection;
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      Backbone.View.apply(this);
    }

    _Class.prototype.initialize = function() {
      return this.collection.forEach((function(_this) {
        return function(section) {
          return _this.sectionList.push(new window.FractalSectionView({
            model: section
          }));
        };
      })(this));
    };

    _Class.prototype.render = function() {
      var section, _i, _len, _ref;
      _ref = this.sectionList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        section = _ref[_i];
        this.$el.append(section.render());
      }
      return this.$el;
    };

    return _Class;

  })(Backbone.View);

  window.ActiveFractal = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.SECTION_ROW_COUNT = 4;

    _Class.prototype.SECTION_COLUMN_COUNT = 4;

    _Class.prototype.CANVAS_PIXEL_WIDTH = 400;

    _Class.prototype.CANVAS_PIXEL_HEIGHT = 285;

    _Class.prototype.defaults = {
      zoom: 1,
      level: 1,
      max_zoom: 4,
      zoom_multiplier: 4
    };

    function _Class(canvas_size) {
      this.zoomIn = __bind(this.zoomIn, this);
      this.startGame = __bind(this.startGame, this);
      this.endLevel = __bind(this.endLevel, this);
      this.startLevel = __bind(this.startLevel, this);
      Backbone.Model.apply(this);
      this.fractal_manager = new window.FractalManager(canvas_size, this.CANVAS_PIXEL_WIDTH, this.CANVAS_PIXEL_HEIGHT);
    }

    _Class.prototype.startLevel = function(this_level) {
      this.fractal_manager.resetCanvas();
      this.set('level', this_level);
      this.set('zoom', 1);
      return this.set('max_zoom', Math.pow(this.get('zoom_multiplier'), this_level));
    };

    _Class.prototype.endLevel = function() {
      return console.log('complete me');
    };

    _Class.prototype.startGame = function() {
      return this.startLevel(1);
    };

    _Class.prototype.zoomIn = function(new_top_left) {
      var new_zoom;
      new_zoom = this.get('zoom') * this.get('zoom_multiplier');
      this.fractal_manager.setCanvas(new_top_left, new_zoom, this.get('zoom'));
      if (new_zoom >= this.get('max_zoom')) {
        this.endLevel();
      }
      return this.set('zoom', new_zoom);
    };

    return _Class;

  })(Backbone.Model);

  window.ActiveFractalView = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.$canvas_el = 0;

    _Class.prototype.current_section = {
      x: 0,
      y: 0
    };

    _Class.prototype.template = _.template("<div id='fractal-game-message'> Click to zoom in. Try to zoom in to the exact location of the fractal on the left. </div> <div class='canvas-header'> Current zoom: <span id='active-zoom' class='zoom'>x<%= zoom %></span> <br/> Target zoom: <span id='target-zoom' class='zoom'>x<%= max_zoom %></span> <br/> Clicks remaining: <span id='remaining-clicks'><%= remaining_clicks %></span> </div> <div id='active-canvas' style='position:relative;'> <div class='active-mandelbrot' /> <div class='fractal-sections' /> </div>");

    function _Class(options) {
      if (options == null) {
        options = {};
      }
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      this.model = options.model, this.classname = options.classname;
      this.fractal_sections = new window.FractalSections({
        width: this.model.CANVAS_PIXEL_WIDTH,
        height: this.model.CANVAS_PIXEL_HEIGHT,
        on_click_function: this.model.zoomIn
      });
      this.fractal_sections_view = new window.FractalSectionsView(this.fractal_sections);
      this.fractal_manager_view = new window.FractalManagerView(this.model.fractal_manager);
      Backbone.View.apply(this);
    }

    _Class.prototype.initialize = function() {
      this.$el = $('#active-fractal');
      this.model.on('change', this.render, this);
      this.render();
      this.fractal_sections_view.initialize();
      return this.fractal_manager_view.initialize();
    };

    _Class.prototype.assign = function(view, selector) {
      view.setElement($(selector));
      return view.render();
    };

    _Class.prototype.render = function() {
      this.$el.html(this.template({
        'zoom': this.model.get('zoom'),
        'max_zoom': this.model.get('max_zoom'),
        'remaining_clicks': this.model.get('max_zoom') / this.model.get('zoom_multiplier') - Math.floor(this.model.get('zoom') / this.model.get('zoom_multiplier')),
        'CANVAS_PIXEL_WIDTH': this.model.CANVAS_PIXEL_WIDTH,
        'CANVAS_PIXEL_HEIGHT': this.model.CANVAS_PIXEL_HEIGHT
      }));
      this.assign(this.fractal_manager_view, '.active-mandelbrot');
      return this.assign(this.fractal_sections_view, '.fractal-sections');
    };

    return _Class;

  })(Backbone.View);

}).call(this);
