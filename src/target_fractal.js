// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.TargetFractal = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.defaults = {
      zoom: 1,
      fractal_manager: 0,
      fractal_manager_view: 0
    };

    function _Class(canvas_size) {
      Backbone.Model.apply(this);
      this.fractal_manager = new window.FractalManager(canvas_size);
      this.fractal_manager_view = new window.FractalManagerView(this.fractal_manager, '#target_mandelbrot');
    }

    _Class.prototype.zoomTo = function(top_left, new_zoom) {
      this.fractal_manager.setCanvas(top_left, new_zoom);
      return this.set('zoom', new_zoom);
    };

    return _Class;

  })(Backbone.Model);

  window.TargetFractalView = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.template = _.template("<div id='target-canvas'> <canvas id='target_mandelbrot' width='400' height='400'> </canvas> <div id='target-zoom' class='zoom'><%= zoom %>x</div> </div>");

    function _Class(options) {
      if (options == null) {
        options = {};
      }
      this.render = __bind(this.render, this);
      this.model = options.model, this.classname = options.classname;
      this.$el = $('#target-fractal');
      this.render();
    }

    _Class.prototype.initialize = function() {
      return this.model.on('change', this.render, this);
    };

    _Class.prototype.render = function() {
      this.$el.html(this.template({
        'zoom': this.model.get('zoom')
      }));
      return this.model.fractal_manager_view.render();
    };

    return _Class;

  })(Backbone.View);

}).call(this);
