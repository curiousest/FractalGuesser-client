// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.TargetFractal = (function(_super) {
    __extends(_Class, _super);

    function _Class(canvas_size, active_fractal) {
      this.getCanvasSectionCoordinates = __bind(this.getCanvasSectionCoordinates, this);
      this.getCanvasSection = __bind(this.getCanvasSection, this);
      this.zoomTo = __bind(this.zoomTo, this);
      this.newRandomCanvas = __bind(this.newRandomCanvas, this);
      Backbone.Model.apply(this);
      this.SECTION_ROW_COUNT = active_fractal.SECTION_ROW_COUNT;
      this.SECTION_COLUMN_COUNT = active_fractal.SECTION_COLUMN_COUNT;
      this.CANVAS_PIXEL_WIDTH = active_fractal.CANVAS_PIXEL_WIDTH;
      this.CANVAS_PIXEL_HEIGHT = active_fractal.CANVAS_PIXEL_HEIGHT;
      this.x_section_size = this.CANVAS_PIXEL_WIDTH / this.SECTION_COLUMN_COUNT;
      this.y_section_size = this.CANVAS_PIXEL_HEIGHT / this.SECTION_ROW_COUNT;
      this.zoom_multiplier = active_fractal.get('zoom_multiplier');
      this.fractal_manager = new window.FractalManager(canvas_size, this.CANVAS_PIXEL_WIDTH, this.CANVAS_PIXEL_HEIGHT);
    }

    _Class.prototype.newRandomCanvas = function(next_level) {
      var level, _i, _results;
      this.fractal_manager.resetCanvas();
      _results = [];
      for (level = _i = 1; 1 <= next_level ? _i <= next_level : _i >= next_level; level = 1 <= next_level ? ++_i : --_i) {
        _results.push((function(_this) {
          return function(level) {
            var section_coordinates;
            section_coordinates = _this.getCanvasSectionCoordinates({
              x: Math.floor(Math.random() * 4),
              y: Math.floor(Math.random() * 4)
            });
            return _this.fractal_manager.setCanvas(section_coordinates.top_left, Math.pow(_this.zoom_multiplier, level), Math.pow(_this.zoom_multiplier, level - 1));
          };
        })(this)(level));
      }
      return _results;
    };

    _Class.prototype.zoomTo = function(top_left, new_zoom) {
      this.fractal_manager.setCanvas(top_left, new_zoom, this.get('zoom'));
      return this.set('zoom', new_zoom);
    };

    _Class.prototype.getCanvasSection = function(coordinate) {
      var x_section, y_section;
      x_section = Math.floor(coordinate.x / this.x_section_size);
      y_section = Math.floor(coordinate.y / this.y_section_size);
      return {
        x: x_section,
        y: y_section
      };
    };

    _Class.prototype.getCanvasSectionCoordinates = function(section) {
      return {
        top_left: {
          x: Math.ceil(section.x * this.x_section_size),
          y: Math.ceil(section.y * this.y_section_size)
        },
        bottom_right: {
          x: Math.ceil((section.x + 1) * this.x_section_size),
          y: Math.ceil((section.y + 1) * this.y_section_size)
        }
      };
    };

    return _Class;

  })(Backbone.Model);

  window.TargetFractalView = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.template = _.template("<div id='target-canvas'> <div class='target-mandelbrot' /> </div>");

    function _Class(options) {
      if (options == null) {
        options = {};
      }
      this.render = __bind(this.render, this);
      this.model = options.model, this.classname = options.classname;
      this.fractal_manager_view = new window.FractalManagerView(this.model.fractal_manager);
      Backbone.View.apply(this);
    }

    _Class.prototype.initialize = function() {
      this.$el = $('#target-fractal');
      this.model.newRandomCanvas(1);
      this.render();
      return this.fractal_manager_view.initialize();
    };

    _Class.prototype.assign = function(view, selector) {
      view.setElement($(selector));
      return view.render();
    };

    _Class.prototype.render = function() {
      this.$el.html(this.template());
      return this.assign(this.fractal_manager_view, '.target-mandelbrot');
    };

    return _Class;

  })(Backbone.View);

}).call(this);
